# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'
# into your database.
from __future__ import unicode_literals

from django.db import models


class Actions(models.Model):
    aid = models.CharField(primary_key=True, max_length=255)
    type = models.CharField(max_length=32)
    callback = models.CharField(max_length=255)
    parameters = models.TextField()
    label = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'actions'


class Authmap(models.Model):
    aid = models.IntegerField(primary_key=True)
    uid = models.IntegerField()
    authname = models.CharField(unique=True, max_length=128)
    module = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'authmap'


class BackupMigrateDestinations(models.Model):
    destination_id = models.IntegerField(primary_key=True)
    machine_name = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    subtype = models.CharField(max_length=32)
    location = models.TextField()
    settings = models.TextField()

    class Meta:
        managed = False
        db_table = 'backup_migrate_destinations'


class BackupMigrateProfiles(models.Model):
    profile_id = models.IntegerField(primary_key=True)
    machine_name = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    filename = models.CharField(max_length=255)
    append_timestamp = models.IntegerField()
    timestamp_format = models.CharField(max_length=14)
    filters = models.TextField()

    class Meta:
        managed = False
        db_table = 'backup_migrate_profiles'


class BackupMigrateSchedules(models.Model):
    schedule_id = models.IntegerField(primary_key=True)
    machine_name = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    source_id = models.CharField(max_length=255)
    destination_id = models.CharField(max_length=255)
    copy_destination_id = models.CharField(max_length=32)
    profile_id = models.CharField(max_length=255)
    keep = models.IntegerField()
    period = models.IntegerField()
    enabled = models.IntegerField()
    cron = models.CharField(max_length=32)
    cron_schedule = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'backup_migrate_schedules'


class BackupMigrateSources(models.Model):
    source_id = models.IntegerField(primary_key=True)
    machine_name = models.CharField(max_length=32)
    name = models.CharField(max_length=255)
    subtype = models.CharField(max_length=32)
    location = models.TextField()
    settings = models.TextField()

    class Meta:
        managed = False
        db_table = 'backup_migrate_sources'


class Batch(models.Model):
    bid = models.IntegerField(primary_key=True)
    token = models.CharField(max_length=64)
    timestamp = models.IntegerField()
    batch = models.TextField(blank=True)

    class Meta:
        managed = False
        db_table = 'batch'


class Block(models.Model):
    bid = models.IntegerField(primary_key=True)
    module = models.CharField(max_length=64)
    delta = models.CharField(max_length=32)
    theme = models.CharField(max_length=64)
    status = models.IntegerField()
    weight = models.IntegerField()
    region = models.CharField(max_length=64)
    custom = models.IntegerField()
    visibility = models.IntegerField()
    pages = models.TextField()
    title = models.CharField(max_length=64)
    cache = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'block'


class BlockCustom(models.Model):
    bid = models.IntegerField(primary_key=True)
    body = models.TextField(blank=True)
    info = models.CharField(unique=True, max_length=128)
    format = models.CharField(max_length=255, blank=True)

    class Meta:
        managed = False
        db_table = 'block_custom'


class BlockNodeType(models.Model):
    module = models.CharField(max_length=64)
    delta = models.CharField(max_length=32)
    type = models.CharField(max_length=32)

    class Meta:
        managed = False
        db_table = 'block_node_type'


class BlockRole(models.Model):
    module = models.CharField(max_length=64)
    delta = models.CharField(max_length=32)
    rid = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'block_role'


class BlockedIps(models.Model):
    iid = models.IntegerField(primary_key=True)
    ip = models.CharField(max_length=40)

    class Meta:
        managed = False
        db_table = 'blocked_ips'


class Cache(models.Model):
    cid = models.CharField(primary_key=True, max_length=255)
    data = models.TextField(blank=True)
    expire = models.IntegerField()
    created = models.IntegerField()
    serialized = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'cache'


class CacheBlock(models.Model):
    cid = models.CharField(primary_key=True, max_length=255)
    data = models.TextField(blank=True)
    expire = models.IntegerField()
    created = models.IntegerField()
    serialized = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'cache_block'


class CacheBootstrap(models.Model):
    cid = models.CharField(primary_key=True, max_length=255)
    data = models.TextField(blank=True)
    expire = models.IntegerField()
    created = models.IntegerField()
    serialized = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'cache_bootstrap'


class CacheField(models.Model):
    cid = models.CharField(primary_key=True, max_length=255)
    data = models.TextField(blank=True)
    expire = models.IntegerField()
    created = models.IntegerField()
    serialized = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'cache_field'


class CacheFilter(models.Model):
    cid = models.CharField(primary_key=True, max_length=255)
    data = models.TextField(blank=True)
    expire = models.IntegerField()
    created = models.IntegerField()
    serialized = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'cache_filter'


class CacheForm(models.Model):
    cid = models.CharField(primary_key=True, max_length=255)
    data = models.TextField(blank=True)
    expire = models.IntegerField()
    created = models.IntegerField()
    serialized = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'cache_form'


class CacheImage(models.Model):
    cid = models.CharField(primary_key=True, max_length=255)
    data = models.TextField(blank=True)
    expire = models.IntegerField()
    created = models.IntegerField()
    serialized = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'cache_image'


class CacheMenu(models.Model):
    cid = models.CharField(primary_key=True, max_length=255)
    data = models.TextField(blank=True)
    expire = models.IntegerField()
    created = models.IntegerField()
    serialized = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'cache_menu'


class CachePage(models.Model):
    cid = models.CharField(primary_key=True, max_length=255)
    data = models.TextField(blank=True)
    expire = models.IntegerField()
    created = models.IntegerField()
    serialized = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'cache_page'


class CachePath(models.Model):
    cid = models.CharField(primary_key=True, max_length=255)
    data = models.TextField(blank=True)
    expire = models.IntegerField()
    created = models.IntegerField()
    serialized = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'cache_path'


class CacheUpdate(models.Model):
    cid = models.CharField(primary_key=True, max_length=255)
    data = models.TextField(blank=True)
    expire = models.IntegerField()
    created = models.IntegerField()
    serialized = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'cache_update'


class DateFormatLocale(models.Model):
    format = models.CharField(max_length=100)
    type = models.CharField(max_length=64)
    language = models.CharField(max_length=12)

    class Meta:
        managed = False
        db_table = 'date_format_locale'


class DateFormatType(models.Model):
    type = models.CharField(primary_key=True, max_length=64)
    title = models.CharField(max_length=255)
    locked = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'date_format_type'


class DateFormats(models.Model):
    dfid = models.IntegerField(primary_key=True)
    format = models.CharField(max_length=100)
    type = models.CharField(max_length=64)
    locked = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'date_formats'


class FieldConfig(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    field_name = models.CharField(max_length=32)
    type = models.CharField(max_length=128)
    module = models.CharField(max_length=128)
    active = models.IntegerField()
    storage_type = models.CharField(max_length=128)
    storage_module = models.CharField(max_length=128)
    storage_active = models.IntegerField()
    locked = models.IntegerField()
    data = models.TextField()
    cardinality = models.IntegerField()
    translatable = models.IntegerField()
    deleted = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'field_config'


class FieldConfigInstance(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    field_id = models.IntegerField()
    field_name = models.CharField(max_length=32)
    entity_type = models.CharField(max_length=32)
    bundle = models.CharField(max_length=128)
    data = models.TextField()
    deleted = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'field_config_instance'


class FieldDataBody(models.Model):
    entity_type = models.CharField(max_length=128)
    bundle = models.CharField(max_length=128)
    deleted = models.IntegerField()
    entity_id = models.IntegerField()
    revision_id = models.IntegerField(blank=True, null=True)
    language = models.CharField(max_length=32)
    delta = models.IntegerField()
    body_value = models.TextField(blank=True)
    body_summary = models.TextField(blank=True)
    body_format = models.CharField(max_length=255, blank=True)

    class Meta:
        managed = False
        db_table = 'field_data_body'


class FieldDataFieldFiles(models.Model):
    entity_type = models.CharField(max_length=128)
    bundle = models.CharField(max_length=128)
    deleted = models.IntegerField()
    entity_id = models.IntegerField()
    revision_id = models.IntegerField(blank=True, null=True)
    language = models.CharField(max_length=32)
    delta = models.IntegerField()
    field_files_fid = models.IntegerField(blank=True, null=True)
    field_files_display = models.IntegerField()
    field_files_description = models.TextField(blank=True)

    class Meta:
        managed = False
        db_table = 'field_data_field_files'


class FieldDataFieldTags(models.Model):
    entity_type = models.CharField(max_length=128)
    bundle = models.CharField(max_length=128)
    deleted = models.IntegerField()
    entity_id = models.IntegerField()
    revision_id = models.IntegerField(blank=True, null=True)
    language = models.CharField(max_length=32)
    delta = models.IntegerField()
    field_tags_tid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'field_data_field_tags'


class FieldRevisionBody(models.Model):
    entity_type = models.CharField(max_length=128)
    bundle = models.CharField(max_length=128)
    deleted = models.IntegerField()
    entity_id = models.IntegerField()
    revision_id = models.IntegerField()
    language = models.CharField(max_length=32)
    delta = models.IntegerField()
    body_value = models.TextField(blank=True)
    body_summary = models.TextField(blank=True)
    body_format = models.CharField(max_length=255, blank=True)

    class Meta:
        managed = False
        db_table = 'field_revision_body'


class FieldRevisionFieldFiles(models.Model):
    entity_type = models.CharField(max_length=128)
    bundle = models.CharField(max_length=128)
    deleted = models.IntegerField()
    entity_id = models.IntegerField()
    revision_id = models.IntegerField()
    language = models.CharField(max_length=32)
    delta = models.IntegerField()
    field_files_fid = models.IntegerField(blank=True, null=True)
    field_files_display = models.IntegerField()
    field_files_description = models.TextField(blank=True)

    class Meta:
        managed = False
        db_table = 'field_revision_field_files'


class FieldRevisionFieldTags(models.Model):
    entity_type = models.CharField(max_length=128)
    bundle = models.CharField(max_length=128)
    deleted = models.IntegerField()
    entity_id = models.IntegerField()
    revision_id = models.IntegerField()
    language = models.CharField(max_length=32)
    delta = models.IntegerField()
    field_tags_tid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'field_revision_field_tags'


class FileManaged(models.Model):
    fid = models.IntegerField(primary_key=True)
    uid = models.IntegerField()
    filename = models.CharField(max_length=255)
    uri = models.CharField(unique=True, max_length=255)
    filemime = models.CharField(max_length=255)
    filesize = models.IntegerField()
    status = models.IntegerField()
    timestamp = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'file_managed'


class FileUsage(models.Model):
    fid = models.IntegerField()
    module = models.CharField(max_length=255)
    type = models.CharField(max_length=64)
    id = models.IntegerField()
    count = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'file_usage'


class Filter(models.Model):
    format = models.CharField(max_length=255)
    module = models.CharField(max_length=64)
    name = models.CharField(max_length=32)
    weight = models.IntegerField()
    status = models.IntegerField()
    settings = models.TextField(blank=True)

    class Meta:
        managed = False
        db_table = 'filter'


class FilterFormat(models.Model):
    format = models.CharField(primary_key=True, max_length=255)
    name = models.CharField(unique=True, max_length=255)
    cache = models.IntegerField()
    status = models.IntegerField()
    weight = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'filter_format'


class Flood(models.Model):
    fid = models.IntegerField(primary_key=True)
    event = models.CharField(max_length=64)
    identifier = models.CharField(max_length=128)
    timestamp = models.IntegerField()
    expiration = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'flood'


class History(models.Model):
    uid = models.IntegerField()
    nid = models.IntegerField()
    timestamp = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'history'


class ImageEffects(models.Model):
    ieid = models.IntegerField(primary_key=True)
    isid = models.IntegerField()
    weight = models.IntegerField()
    name = models.CharField(max_length=255)
    data = models.TextField()

    class Meta:
        managed = False
        db_table = 'image_effects'


class ImageStyles(models.Model):
    isid = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=255)
    label = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'image_styles'


class MenuLinks(models.Model):
    menu_name = models.CharField(max_length=32)
    mlid = models.IntegerField(primary_key=True)
    plid = models.IntegerField()
    link_path = models.CharField(max_length=255)
    router_path = models.CharField(max_length=255)
    link_title = models.CharField(max_length=255)
    options = models.TextField(blank=True)
    module = models.CharField(max_length=255)
    hidden = models.IntegerField()
    external = models.IntegerField()
    has_children = models.IntegerField()
    expanded = models.IntegerField()
    weight = models.IntegerField()
    depth = models.IntegerField()
    customized = models.IntegerField()
    p1 = models.IntegerField()
    p2 = models.IntegerField()
    p3 = models.IntegerField()
    p4 = models.IntegerField()
    p5 = models.IntegerField()
    p6 = models.IntegerField()
    p7 = models.IntegerField()
    p8 = models.IntegerField()
    p9 = models.IntegerField()
    updated = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'menu_links'


class MenuRouter(models.Model):
    path = models.CharField(primary_key=True, max_length=255)
    load_functions = models.TextField()
    to_arg_functions = models.TextField()
    access_callback = models.CharField(max_length=255)
    access_arguments = models.TextField(blank=True)
    page_callback = models.CharField(max_length=255)
    page_arguments = models.TextField(blank=True)
    delivery_callback = models.CharField(max_length=255)
    fit = models.IntegerField()
    number_parts = models.IntegerField()
    context = models.IntegerField()
    tab_parent = models.CharField(max_length=255)
    tab_root = models.CharField(max_length=255)
    title = models.CharField(max_length=255)
    title_callback = models.CharField(max_length=255)
    title_arguments = models.CharField(max_length=255)
    theme_callback = models.CharField(max_length=255)
    theme_arguments = models.CharField(max_length=255)
    type = models.IntegerField()
    description = models.TextField()
    position = models.CharField(max_length=255)
    weight = models.IntegerField()
    include_file = models.TextField(blank=True)

    class Meta:
        managed = False
        db_table = 'menu_router'


class Node(models.Model):
    nid = models.IntegerField(primary_key=True)
    vid = models.IntegerField(unique=True, blank=True, null=True)
    type = models.CharField(max_length=32)
    language = models.CharField(max_length=12)
    title = models.CharField(max_length=255)
    uid = models.IntegerField()
    status = models.IntegerField()
    created = models.IntegerField()
    changed = models.IntegerField()
    comment = models.IntegerField()
    promote = models.IntegerField()
    sticky = models.IntegerField()
    tnid = models.IntegerField()
    translate = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'node'


class NodeAccess(models.Model):
    nid = models.IntegerField()
    gid = models.IntegerField()
    realm = models.CharField(max_length=255)
    grant_view = models.IntegerField()
    grant_update = models.IntegerField()
    grant_delete = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'node_access'


class NodeRevision(models.Model):
    nid = models.IntegerField()
    vid = models.IntegerField(primary_key=True)
    uid = models.IntegerField()
    title = models.CharField(max_length=255)
    log = models.TextField()
    timestamp = models.IntegerField()
    status = models.IntegerField()
    comment = models.IntegerField()
    promote = models.IntegerField()
    sticky = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'node_revision'


class NodeType(models.Model):
    type = models.CharField(primary_key=True, max_length=32)
    name = models.CharField(max_length=255)
    base = models.CharField(max_length=255)
    module = models.CharField(max_length=255)
    description = models.TextField()
    help = models.TextField()
    has_title = models.IntegerField()
    title_label = models.CharField(max_length=255)
    custom = models.IntegerField()
    modified = models.IntegerField()
    locked = models.IntegerField()
    disabled = models.IntegerField()
    orig_type = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'node_type'


class Queue(models.Model):
    item_id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255)
    data = models.TextField(blank=True)
    expire = models.IntegerField()
    created = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'queue'


class Registry(models.Model):
    name = models.CharField(max_length=255)
    type = models.CharField(max_length=9)
    filename = models.CharField(max_length=255)
    module = models.CharField(max_length=255)
    weight = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'registry'


class RegistryFile(models.Model):
    filename = models.CharField(primary_key=True, max_length=255)
    hash = models.CharField(max_length=64)

    class Meta:
        managed = False
        db_table = 'registry_file'


class Role(models.Model):
    rid = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=64)
    weight = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'role'


class RolePermission(models.Model):
    rid = models.IntegerField()
    permission = models.CharField(max_length=128)
    module = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'role_permission'


class Semaphore(models.Model):
    name = models.CharField(primary_key=True, max_length=255)
    value = models.CharField(max_length=255)
    expire = models.FloatField()

    class Meta:
        managed = False
        db_table = 'semaphore'


class Sequences(models.Model):
    value = models.IntegerField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'sequences'


class Sessions(models.Model):
    uid = models.IntegerField()
    sid = models.CharField(max_length=128)
    ssid = models.CharField(max_length=128)
    hostname = models.CharField(max_length=128)
    timestamp = models.IntegerField()
    cache = models.IntegerField()
    session = models.TextField(blank=True)

    class Meta:
        managed = False
        db_table = 'sessions'


class System(models.Model):
    filename = models.CharField(primary_key=True, max_length=255)
    name = models.CharField(max_length=255)
    type = models.CharField(max_length=12)
    owner = models.CharField(max_length=255)
    status = models.IntegerField()
    bootstrap = models.IntegerField()
    schema_version = models.IntegerField()
    weight = models.IntegerField()
    info = models.TextField(blank=True)

    class Meta:
        managed = False
        db_table = 'system'


class TaxonomyIndex(models.Model):
    nid = models.IntegerField()
    tid = models.IntegerField()
    sticky = models.IntegerField(blank=True, null=True)
    created = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'taxonomy_index'


class TaxonomyTermData(models.Model):
    tid = models.IntegerField(primary_key=True)
    vid = models.IntegerField()
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    format = models.CharField(max_length=255, blank=True)
    weight = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'taxonomy_term_data'


class TaxonomyTermHierarchy(models.Model):
    tid = models.IntegerField()
    parent = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'taxonomy_term_hierarchy'


class TaxonomyVocabulary(models.Model):
    vid = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255)
    machine_name = models.CharField(unique=True, max_length=255)
    description = models.TextField(blank=True)
    hierarchy = models.IntegerField()
    module = models.CharField(max_length=255)
    weight = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'taxonomy_vocabulary'


class UrlAlias(models.Model):
    pid = models.IntegerField(primary_key=True)
    source = models.CharField(max_length=255)
    alias = models.CharField(max_length=255)
    language = models.CharField(max_length=12)

    class Meta:
        managed = False
        db_table = 'url_alias'


class Users(models.Model):
    uid = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=60)
    pass_field = models.CharField(db_column='pass', max_length=128)  # Field renamed because it was a Python reserved word.
    mail = models.CharField(max_length=254, blank=True)
    theme = models.CharField(max_length=255)
    signature = models.CharField(max_length=255)
    signature_format = models.CharField(max_length=255, blank=True)
    created = models.IntegerField()
    access = models.IntegerField()
    login = models.IntegerField()
    status = models.IntegerField()
    timezone = models.CharField(max_length=32, blank=True)
    language = models.CharField(max_length=12)
    picture = models.IntegerField()
    init = models.CharField(max_length=254, blank=True)
    data = models.TextField(blank=True)

    class Meta:
        managed = False
        db_table = 'users'


class UsersRoles(models.Model):
    uid = models.IntegerField()
    rid = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'users_roles'


class Variable(models.Model):
    name = models.CharField(primary_key=True, max_length=128)
    value = models.TextField()

    class Meta:
        managed = False
        db_table = 'variable'


class Watchdog(models.Model):
    wid = models.IntegerField(primary_key=True)
    uid = models.IntegerField()
    type = models.CharField(max_length=64)
    message = models.TextField()
    variables = models.TextField()
    severity = models.IntegerField()
    link = models.CharField(max_length=255, blank=True)
    location = models.TextField()
    referer = models.TextField(blank=True)
    hostname = models.CharField(max_length=128)
    timestamp = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'watchdog'
